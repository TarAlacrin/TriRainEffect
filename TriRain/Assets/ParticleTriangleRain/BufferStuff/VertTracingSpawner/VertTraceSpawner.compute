// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
#include "Assets/ComputeInc/ComputeIncludes.cginc"

struct ParticleData {
	float originVertId;//store ids as floats to easier convert to texture later
	float targetVertId;
	float percentageTraveled;
	float velocity;
};

float _Time;
int _VertCount;
AppendStructuredBuffer<ParticleData> _ParticlePositionsToCheck;
Texture2D _MeshVertPositions;
//AppendBufferToSpawnRainDropies

int findVertIndex(int offsetID)
{
	for (int i = 0; i < _VertCount; i++)
	{
		int ind = (i + offsetID) % _VertCount;
		int2 coord = int2(Coord(ind).xy);

		float3 vpos = _MeshVertPositions[coord];

		if (vpos.y > 0.5)
			return i;
	}

	return 0;
}

 

[numthreads(1,1,1)]
void CSMain (uint id : SV_DispatchThreadID)
{
	float rando = rand(float2(_Time, id));
	ParticleData pout;
	pout.originVertId = -1;
	pout.velocity = 1;
	pout.percentageTraveled = 1;
	pout.targetVertId = int(rando * _VertCount) % _VertCount; //findVertIndex(int(rando*_VertCount)); //;
	_ParticlePositionsToCheck.Append(pout);
}
